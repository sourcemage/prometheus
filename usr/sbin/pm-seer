#!/usr/bin/perl
##################################################################
#Copyright (C) 2003 Andrew Stitt astitt@sourcemage.org
#Copyright (C) 2003 Duane Malcolm d.malcolm@auckland.ac.nz
#Copyright (C) 2003 Source Mage GNU/Linux (www.sourcemage.org)
#
#This program is free software; you can redistribute it and/or
#modify it under the terms of the GNU General Public License
#as published by the Free Software Foundation; either
#version 2 of the License, or (at your option) any later
#version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
##################################################################

#todo:
# remove useless options
# make summon fail list
# title
# clean up config/option crap...
# output trimming
#

# Seer is a reporting tool for prometheus.

sub seer_usage {
  print STDOUT << "END_OF_HELP";
Seer is a reporting tool prometheus output.

Function:
  --summary : implies all other reporting options in the order they appear
  --snapshot <snapshot> : snapshot name
  --output <output dir> : full path to output dir (default is snapshot dir)
  --bzip2 : bzip2 the final report

reporting options:
  --coord : the where and then when
  --hls : make a high level summary

  --analysis : try to say something intelligent
  --lists : reports current, failure and success lists
  --md5 : lists the md5sum problems encountered if any

  --activity : reports activity
  --depends : lists dependency settings
  --grimoires : reports grimoires installed and their ordering
  --system : reports system and prometheus settings
  --installed : lists things installed (a bit redundant)


  --compile <#lines|full> : reports #line or all of compile log

  --badfiles : report files that were deleted, left, or changed
  --usrlocal : files that somehow ended up in /usr/local

END_OF_HELP
}


# Perl tips:
# - map { print $_; } @list; to print a list
# - for @list { print $_;}
# - read a file into a list like this: @list=<FILE>;
# - print "looping" while(1);
# - set the field seperator: $"
# - end of a list seperator: $\
# - $CONFIG{"current_list"}=$CONFIG{lists_dir}/currcast.lst");


#DEFAULTS
%CONFIG=('compile_lines',40, 'config_lines','full', 'max_size',65536, 'help',0);
seer_initialize();
seer_parse();
if($CONFIG{"help"}){
  seer_usage();
  exit 1;
} elsif(!defined $CONFIG{snapshot_name}){
  print "You need to give me a snapshot";
  exit 1;
}
seer_build_config();
main();

###################
### SUBROUTINES ###
###################
sub seer_build_config(){
  #this is where the snapshot is located
  $CONFIG{"snapshot_dir"}	="$PMCONFIG{SNAP_DIR}/$CONFIG{snapshot_name}";
  $CONFIG{"output_dir"}		="$CONFIG{snapshot_dir}" 
				if (! defined $CONFIG{output_dir});

  #files and stuff
  $CONFIG{"current_list"}	="$CONFIG{snapshot_dir}/lists/currcast.lst";
  $CONFIG{"success_list"}	="$CONFIG{snapshot_dir}/lists/success.lst";
  $CONFIG{"failure_list"}	="$CONFIG{snapshot_dir}/lists/failure.lst";
  $CONFIG{"config_file"}	="$CONFIG{snapshot_dir}/local/config";
  $CONFIG{"grimoire_file"}	="$CONFIG{snapshot_dir}/local/grimoire";
  $CONFIG{"activity_file"}	="$CONFIG{snapshot_dir}/activity";
  $CONFIG{"compile_logs"}	="$CONFIG{snapshot_dir}/failure";
  $CONFIG{"config_logs"}	="$CONFIG{snapshot_dir}/failure";
  $CONFIG{"installed_file"}	="$CONFIG{snapshot_dir}/packages";
  $CONFIG{"depends_file"}	="$CONFIG{snapshot_dir}/depends";

  #stuff for bad files
  $CONFIG{"old_list"}		="$CONFIG{snapshot_dir}/old.lst";
  $CONFIG{"new_list"}		="$CONFIG{snapshot_dir}/new.lst";
  $CONFIG{"diff_list"}		="$CONFIG{snapshot_dir}/different.lst";
  $CONFIG{"diff_log"}		="$CONFIG{snapshot_dir}/diff.log";
  $CONFIG{"usrlocal_list"}	="$CONFIG{snapshot_dir}/usrlocal.lst";
  $CONFIG{"pm_automd5"}		="$CONFIG{snapshot_dir}/pm-automd5.lst";
}

sub main() {
  seer_read();

  if(defined %ERROR){
    $CONFIG{output_file}="$CONFIG{output_dir}/report.failure";
    open FILE, ">$CONFIG{output_dir}/title" or
        die "Error: Can't open $CONFIG{output_dir}/title\n";
    seer_write_title() if($CONFIG{title});
    close FILE;
  }else{
    $CONFIG{output_file}="$CONFIG{output_dir}/report.success";
  }

  $not_done = 1;
  while($not_done) {
print "in loop";
    seer_write();
print "did write";
    $total = 0;
    map { $total += $LINES{$_}} keys %LINES;
print "$total";
    if ( $total > $CONFIG{max_size} )  {
print "doing the trim";
      seer_trim();
    } else {
      $not_done = 0;
    }
  }
  
  if($CONFIG{bzip2}){
    `bzip2 -f $CONFIG{output_file}`;
  }
}

sub seer_initialize{
  #source the config file and then output all the variables
  #store the output in $foo
  my $foo=`bash -norc -noprofile -c "source /etc/pm-config 2>/dev/null && set"`;
  if ($?!=0){
    seer_usage();
    exit 1;
  }
  map{
    ($key,$value)=split "=",$_;
    $PMCONFIG{$key}=$value;
  }split "\n",$foo;
}


sub seer_parse{
 for($i=0;$i<=@ARGV;$i++){
    if($ARGV[$i]=~/^--summary/){
      %CONFIG=(%CONFIG, coord,1, hls,1, analysis,1, activity,1, lists,1,
			installed,1, depends,1, "system",1, "local",1,
			grimoires,1, compile,1, badfiles,1,
			usrlocal,1,md5,1,title,1);
    }elsif($ARGV[$i]=~/^--snapshot/){
      if($ARGV[$i+1] ne /--|-/){$CONFIG{snapshot_name}=$ARGV[++$i];}}
    elsif($ARGV[$i]=~/^--output/){
      if($ARGV[$i+1] ne /--|-/){%CONFIG=(%CONFIG,"output_dir",$ARGV[++$i]);}}
    elsif($ARGV[$i]=~/^--system/){%CONFIG=(%CONFIG,"system",1);}
    elsif($ARGV[$i]=~/^--grimoires/){%CONFIG=(%CONFIG,"grimoires",1);}
    elsif($ARGV[$i]=~/^--hls/){%CONFIG=(%CONFIG,"hls",1);}
    elsif($ARGV[$i]=~/^--coord/){%CONFIG=(%CONFIG,"coord",1);}
    elsif($ARGV[$i]=~/^--analysis/){ %CONFIG=(%CONFIG,"analysis",1); }
    elsif($ARGV[$i]=~/^--activity/){%CONFIG=(%CONFIG,"activity",1);}
    elsif($ARGV[$i]=~/^--lists/){%CONFIG=(%CONFIG,"lists",1);}
    elsif($ARGV[$i]=~/^--compile/){
      %CONFIG=(%CONFIG,"compile",1);
      if($ARGV[$i+1] ne /--|-/){%CONFIG=(%CONFIG,"compile_lines",$ARGV[$i+1]);++$i;}}
    elsif($ARGV[$i]=~/^--installed/){%CONFIG=(%CONFIG,"installed",1);}
    elsif($ARGV[$i]=~/^--badfiles/){%CONFIG=(%CONFIG,"badfiles",1);}
    elsif($ARGV[$i]=~/^--md5/){%CONFIG=(%CONFIG,"md5",1);}
    elsif($ARGV[$i]=~/^--usrlocal/){%CONFIG=(%CONFIG,"usrlocal",1);}
    elsif($ARGV[$i]=~/^--depends/){%CONFIG=(%CONFIG,"depends",1);}
    elsif($ARGV[$i]=~/^--bzip2/){%CONFIG=(%CONFIG,"bzip2",1);}
    elsif($ARGV[$i]=~/^--help/){%CONFIG=(%CONFIG,"help",1);}
  }

  return %CONFIG;
}


# this code was a crutch and it sucks if i dont need it
# in the next few weeks (today is 4/1), then its going away
sub seer_trim_options{
  #trim config to a number if its 'full'
  if($CONFIG{config} and ($OPTIONS{config_lines} eq "full")){
    if($CONFIG{compile} and $CONFIG{compile_lines} ne "full"){
      $CONFIG{config_lines}=$CONFIG{compile_lines};
    }else{
      $CONFIG{config_lines}=160;
    }
  #trim compile if its 'full'
  }elsif($CONFIG{compile} and $CONFIG{compile_lines} eq "full"){
      $CONFIG{compile_lines}=160;
  #trim config to less than compile if its bigger, or trim compile
  }elsif($CONFIG{compile} and $CONFIG{compile_lines}>0){
    if($CONFIG{config} and $CONFIG{compile_lines}<$CONFIG{config_lines}){
      if($CONFIG{config_lines}>40){
        $CONFIG{config_lines}/=2;
      }else{
        $CONFIG{config}=0
      }
    }else{
      if($CONFIG{compile_lines}>40){
        $CONFIG{compile_lines}/=2;
      }else{
        $CONFIG{compile}=0;
      }
    }
  }elsif($CONFIG{config} and $CONFIG{config_lines}>0){
      if($CONFIG{config_lines}>40){
        $CONFIG{config_lines}/=2;
      }else{
        $CONFIG{config}=0
      }
  }elsif($CONFIG{config}){ $CONFIG{config}=0;
  }elsif($CONFIG{compile}){ $CONFIG{compile}=0;
  #if we get this far we are in serious trouble
  #basically the number of compile/config logs is so huge
  #that we cant make a report, so basically we need to just turn things off
  }elsif($CONFIG{depends}){ $CONFIG{depends}=0;
  }elsif($CONFIG{grimoires}){ $CONFIG{grimoires}=0;
  }elsif($CONFIG{"system"}){ $CONFIG{"system"}=0;
  }elsif($CONFIG{md5}){ $CONFIG{md5}=0;
  }elsif($CONFIG{badfiles}){ $CONFIG{badfiles}=0;
  }elsif($CONFIG{usrlocal}){ $CONFIG{usrlocal}=0;
  }elsif($CONFIG{installed}){ $CONFIG{installed}=0;
  }elsif($CONFIG{coord}){ $CONFIG{coord}=0;
  }elsif($CONFIG{lists}){ $CONFIG{lists}=0;
  }elsif($CONFIG{analysis}){ $CONFIG{analysis}=0;
  }else{ $CONFIG{max_size}="ignore"; }
  #all that remains is the hls, which is a maximum of 4 lines...
  #that _cant_ be too big...
}

#all code related to trimmming options goes here
#this function is also meant to be recalled repeatedly if necessary
#so it has to work in all cases
sub seer_trim{
print "TRIMING\n";

  my $max_val = -1;
  my $max_name = "compile";
  map {
    print "$_ $LINES{$_}\n";
    if ($LINES{$_} > $max_val) {
      $max_val=$LINES{$_};
      $max_name=$_;
    }
    $LINES{$key}=0;
  } keys %LINES;
  print "The biggest item was $max_name at $max_val\n";

  if($max_name eq compile) {
    if ( $CONFIG{compile_lines} eq full) {
      $CONFIG{compile_lines} = 160;
    } elsif ( $CONFIG{compile_lines} > 30 ) {
      $CONFIG{compile_lines} = int ($CONFIG{compile_lines} * 0.9);
    } else {
      $CONFIG{compile} = 0;
    }
    print "Trimming compile size to $CONFIG{compile_lines}\n";
  } elsif ( $max_name eq hdr) {
    die "the report is somehow too big when nothing is left but a header";
  } else {
    print "Turning off $max_name";
    $CONFIG{$max_name} = 0;
  }
}

##############################################
sub seer_read{
  if($CONFIG{lists}){ seer_read_list(); }
  if($CONFIG{activity}){ seer_read_activity(); }
  if($CONFIG{depends} or $CONFIG{analysis}){seer_read_depends();}
  if($CONFIG{installed} or $CONFIG{analysis}){seer_read_installed();}
  if($CONFIG{badfiles}){ seer_read_badfiles(); }
  if($CONFIG{md5}){ seer_read_md5(); }
  if($CONFIG{usrlocal}){ seer_read_usrlocal(); }
  return;
}

##############################################
sub seer_write{
  open FILE, ">$CONFIG{output_file}" or die "Error: Can't open $CONFIG{output_file}\n";
  $count = 0;
  cprint (FILE,"PROMETHEUS REPORT\n\n");
  $LINES{hdr} = $count; $count = 0;
  seer_write_hls() if($CONFIG{hls});
  $LINES{hls} = $count; $count = 0;
  seer_write_coord() if($CONFIG{coord});
  $LINES{coord} = $count; $count = 0;
  seer_write_lists() if($CONFIG{lists});
  $LINES{lists} = $count; $count = 0;
  seer_write_analysis() if($CONFIG{analysis});
  $LINES{analysis} = $count; $count = 0;
  seer_write_compile() if($CONFIG{compile});
print "COMPILE COUNT IS $count\n";
  $LINES{compile} = $count; $count = 0;
  seer_write_badfiles() if($CONFIG{badfiles});
  $LINES{badfiles} = $count; $count = 0;
  seer_write_md5() if($CONFIG{md5});
  $LINES{md5} = $count; $count = 0;
  seer_write_usrlocal() if($CONFIG{usrlocal});
  $LINES{usrlocal} = $count; $count = 0;
  seer_write_system() if($CONFIG{system});
  $LINES{system} = $count; $count = 0;
  seer_write_activity() if($CONFIG{activity});
  $LINES{activity} = $count; $count = 0;
  seer_write_grimoire() if($CONFIG{grimoire});
  $LINES{grimoire} = $count; $count = 0;
  seer_write_depends() if($CONFIG{depends});
  $LINES{depends} = $count; $count = 0;
  seer_write_installed() if($CONFIG{installed});
  $LINES{installed} = $count; $count = 0;
  close FILE;
}

########################################
#################
#seer_read stuff#
#################

sub seer_read_list{
  open FILE, "<$CONFIG{current_list}";
  @CURRENT_LIST=<FILE>;
  close FILE;
  open FILE, "<$CONFIG{success_list}";
  @SUCCESS_LIST=<FILE>;
  close FILE;
  open FILE, "<$CONFIG{failure_list}";
  @FAILURE_LIST=<FILE>;
  close FILE;
  $ERROR{cast}=@FAILURE_LIST if (@FAILURE_LIST);
}


sub seer_read_activity{
  open FILE, "<$CONFIG{activity_file}";
  while (<FILE>){
    ($date,$task,$spell,$version,$result,$info)=(/\s*(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(.*)/);    
    my @foo=($result,$task,$spell,$version,$info);
    push @ACTIVITY,\@foo;
  }
  close FILE;
}

sub seer_read_depends{
  open FILE, "<$CONFIG{depends_file}";
  @depends=<FILE>;
  close FILE;
}
sub seer_read_installed{
  open FILE, "<$CONFIG{installed_file}";
  @installed=<FILE>;
  close FILE;
}


#since its of no use atm to waste memory sucking this in, im just going
#to set some flags and refer to them later
#XXXX
sub seer_read_badfiles{
  if( -s $CONFIG{new_list}){
    open FILE, "<$CONFIG{new_list}";
    @new_files=sort <FILE>;
    $ERROR{new_files}=@new_files;
    close FILE
  }
  if( -s $CONFIG{old_list}){
    open FILE, "$CONFIG{old_list}";
    @old_files=sort <FILE>;
    $ERROR{old_files}=@old_files;
    close FILE
  }
  if( -s $CONFIG{diff_list}){
    open FILE, "$CONFIG{diff_list}";
    @diff_files=sort <FILE>;
    $ERROR{diff_files}=@diff_files;
    close FILE
  }
}

sub seer_read_usrlocal{
  if( -s $CONFIG{usrlocal_list}){
    open FILE, "$CONFIG{usrlocal_list}";
    @usrlocal_files=<FILE>;
    $ERROR{usrlocal}=@usrlocal_files;
    close FILE
  }
}


sub seer_read_md5{
  open FILE, "<$CONFIG{pm_automd5}";
  @md5probs=<FILE>;
  foreach $bar (@md5probs){
    if($bar=~/.*:.*:(missing)|(different):*/){
      $ERROR{md5}++;
    }
  }
  close FILE;
}

##################
#seer_write stuff#
##################
sub seer_write_title{
  my $hostname=`hostname`;
  chomp $hostname;

  #Theres more than one way to do it.
  #and I'll be damned if Im going to set and then check a variable
  #when a goto will suffice, besides I like control flow to hold conditions
  for($i=0;$i<@ACTIVITY;$i++){
    ($result,$task,$spell,$version,$info)=@{$ACTIVITY[$i]};
    if ($task =~ /summon/ and $result =~ /fail/) { 
      print FILE "summon failure $spell";
      goto end;
    }
    elsif ($task =~ /cast/ and $result =~ /fail/) { 
      print FILE "cast failure $spell";
      goto end;
    }
  }
  $spell=$CURRENT_LIST[0];
  chomp $spell;
  foreach $key (sort keys %ERROR) {
    if($key eq "md5") {
      print FILE "$ERROR{$key} md5sum problems"; goto end;
    } elsif($key eq "new_files"){
      print FILE "$ERROR{$key} file(s) left behind from $spell"; goto end;
    } elsif($key eq "old_files"){
      print FILE "$ERROR{$key} file(s) removed from $spell"; goto end;
    } elsif($key eq "diff_files"){
      print FILE "$ERROR{$key} file(s) changed from $spell"; goto end;
    } elsif($key eq "usrlocal"){
      print FILE "$ERROR{$_} file(s) in /usr/local from $spell"; goto end;
    }
  }
  end:
  print FILE ":$hostname:$CONFIG{snapshot_name}\n";
}

sub seer_write_hls{
  cprint (FILE, "HIGH LEVEL SUMMARY:\n");
  if( defined %ERROR ){
    map{
      if($_ eq "cast"){
        $foo=@FAILURE_LIST;
        cprint (FILE, "  At least $foo cast(s) failed.\n");
      }
      cprint (FILE, "  At least $ERROR{$_} md5sum problems occured.\n") if($_ eq "md5");
      cprint (FILE, "  At least $ERROR{$_} file(s) left behind after the dispel.\n") if($_ eq "new_files");
      cprint (FILE, "  At least $ERROR{$_} file(s) removed after a dispel when it shouldnt have.\n") if($_ eq "old_files");
      cprint (FILE, "  At least $ERROR{$_} file(s) left changed after the dispel.\n") if($_ eq "diff_files");
      cprint (FILE, "  At least $ERROR{$_} file(s) placed in /usr/local after a cast.\n") if($_ eq "usrlocal");
    } sort keys %ERROR
  }else{
    cprint (FILE, "I found no problems.\n");
  }
  cprint (FILE, "\n\n");

}

sub seer_write_coord{
  cprint (FILE,"PROMETHEUS COORDINATES:\n");
  cprint (FILE,`hostname`);
  cprint (FILE,"$CONFIG{snapshot_name}\n\n");
}

sub seer_write_analysis{
  if($CONFIG{analysis}){
    %DONE=();
    cprint (FILE,"SUMMARY:\n");
    for($i=0;$i<@ACTIVITY;$i++){
      ($result,$task,$spell,$version,$info)=@{$ACTIVITY[$i]};
      if (($task =~ /cast/) and ($DONE{"$spell $version"} ne 1)){
        %DONE=(%DONE,"$spell $version",1);
	cprint (FILE,"$result   $spell-$version $info\n");
        for($j=0;$j<@depends;$j++){
          if($depends[$j]=~/^\Q$spell:/){
	    ($depends_name,$state,$depend_type)=($depends[$j]=~/\s*\w+:(\S+):(\S+):(\w+).*/);
            $installed_spell="not";
	    for($k=0;$k<@installed;$k++){
	      ($name)=($installed[$k]=~/(\S+):\d+:\w+/);
	      if($depends_name eq $name){
                ($installed_spell,$date,$installed_state,$installed_version)=($installed[$k]=~/\s*(\S+):(\d+):(\w+):(\S+).*/);
              }
            }
            if($installed_spell eq "not"){
               cprint (FILE,"              $depend_type($state): $depends_name [not installed]\n");
            }else{
               cprint (FILE,"              $depend_type($state): $depends_name [$installed_spell-$installed_version $installed_state($date)]\n");
            }
          }
        }
      }
    }
  cprint (FILE,"\n\n");
  }
}

sub seer_write_system{
  if($CONFIG{system}){
    cprint (FILE,"SYSTEM SETTINGS:\n");
    map {
      if(/SORCERY_BRANCH|ARCHITECT|OPTIM/){
        cprint (FILE,"  $_=$SYSTEM{$_}\n");}
    } keys %SYSTEM;
    cprint (FILE,"\n");
    cprint (FILE,"LOCAL SETTINGS:\n");
    map{
      if((/KEEP_SNAP|GRIMOIRE|NUM_CAST|MACHTYPE|DO_DEFAULTS/)){
        cprint (FILE,"  $_ = $PMCONFIG{$_}\n");
      }
    }keys %PMCONFIG;
  cprint (FILE,"\n\n");
  }
}

sub seer_write_grimoire{
  if($CONFIG{grimoire}){
    cprint (FILE,"GRIMOIRES:\n");
    map{ cprint (FILE, "  $_\n"); } @grimoires;
    cprint (FILE, "\n\n");
  }
}

sub seer_write_activity{
  if($CONFIG{activity} or $CONFIG{summary}){
    cprint (FILE,"ACTIVITY LOG:\n");
    map{ cprint (FILE,"  @$_\n"); }@ACTIVITY;
    cprint (FILE, "\n\n");
  }
}

sub seer_write_lists{
  if($CONFIG{lists} or $CONFIG{summary}){
    cprint (FILE,"CURRENT LIST:\n");
    map { cprint (FILE,"  $_"); } @CURRENT_LIST;
    cprint (FILE,"\n\n");
    cprint (FILE,"FAILURE LIST:\n");
    map { cprint (FILE,"  $_"); } @FAILURE_LIST;
    cprint (FILE,"\n\n");
    cprint (FILE,"SUCCESS LIST:\n");
    map { cprint (FILE,"  $_"); } @SUCCESS_LIST;
    cprint (FILE,"\n\n");
  }
}

sub seer_write_compile{
  if($CONFIG{compile}){
    cprint (FILE,"COMPILE LOGS: \n");
    @files=glob ("$CONFIG{compile_logs}/*/compile/*bz2");
    foreach $file (@files){
      @compile_log = `bzcat $file`;
      ($file)=($file=~/\S*\/(\S+)$/); #wtf
      $file_length=@compile_log;
      if($CONFIG{compile_lines}=~/full/){
        $start=0;
      } else{
        $start=$file_length-$CONFIG{compile_lines};
        if ($start<0){$start=0;};
      }
      cprint (FILE,"\nCOMPILE LOG: $file [Lines: $start-$file_length]\n\n");

      for($i=$start;$i<=$file_length;$i++){
        cprint (FILE,"$compile_log[$i]");
      }
      cprint (FILE,"\n");
    }
    cprint (FILE,"\n");
  }
}
  

sub seer_write_installed{  
  if($CONFIG{installed}){
    cprint (FILE,"INSTALLED SPELLS:\n");
    @installed=sort(@installed);
    map { cprint (FILE,"  $_"); } @installed;
    cprint (FILE,"\n\n");
  }
}

sub seer_write_depends{
  if($CONFIG{depends}){
    my %SPELLHASH;
    map{
      chomp;
      $SPELLHASH{$_}=1;
    } (@SUCCESS_LIST,@FAILURE_LIST);
    cprint (FILE,"DEPENDENCIES:\n");
    map{
      ($spell,$depend,$value,$type,$option_on,$option_off)=split ':';
      if($SPELLHASH{$spell}==1 or $SPELLHASH{$depend}==1){
        cprint (FILE,$_);
      }
    }sort @depends;
    cprint (FILE,"\n\n");
  }
}

sub seer_write_badfiles{
  if($ERROR{new_files}){
    cprint (FILE,"FILES OF UNKNOWN ORIGIN:\n");
    cprint (FILE,"@new_files");
    cprint (FILE,"\n");
  }
  if($ERROR{old_files}){
    cprint (FILE,"\nMISSING FILES:\n");
    cprint (FILE,"@old_files");
    cprint ("\n");
  }
  if($ERROR{diff_files}){
    cprint (FILE,"\nCHANGED FILES:\n");
    cprint (FILE,"@diff_files");
    cprint (FILE,"\n");
  }
}

sub seer_write_md5{
  if(defined @md5probs){
    cprint (FILE,"PROBLEMS WITH MD5SUMS\n");
    cprint (FILE,"@md5probs");
    cprint (FILE,"\n\n");
  }
}

sub seer_write_usrlocal{
  if($CONFIG{usrlocal} and $ERROR{usrlocal}){
    cprint (FILE,"/USR/LOCAL FILES:\n");
    cprint (FILE ,"@usrlocal_files");
    cprint (FILE,"\n\n");
  }
}


sub cprint{
  ($FH,$out)=@_;
  $retval=print $FH $out;
  $count+=length $out;
  return $retval;
}
